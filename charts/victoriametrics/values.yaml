secret:
  grafanaAdminPassword: ''
  grafanaAdminUser: ''

metricsProxy:
  image:
    version: ''

defaultDashboards:
  annotations:
    argocd.argoproj.io/sync-options: ServerSideApply=true
  defaultTimezone: Europe/Berlin

alertmanager:
  ingress:
    enabled: true
    ingressClassName: cilium
    annotations:
      cert-manager.io/cluster-issuer: cloudflare-letsencrypt-production
      ingress.cilium.io/loadbalancer-mode: shared
    hosts:
      - ''
    tls:
    - secretName: alertmanager-tls
      hosts:
        - ''
  config:
    route:
      # receiver: webhook
      receiver: telegram
    receivers:
      - name: telegram
        telegram_configs:
          - bot_token: ''
            chat_id: ''
      # - name: webhook
      #   webhook_configs:
      #   - url: https://${notify_domain}/notify/${apprise_config_id}?template=json&disabletls=yes&messagekey=body
      #     http_config:
      #       basic_auth:
      #         username: <USERNAME>
      #         password: <PASSWORD>
      #       tls_config:
      #         insecure_skip_verify: true

victoria-metrics-operator:
  crds:
    cleanup:
      enabled: false
  enabled: false

vmagent:
  spec:
    resources:
      limits:
        memory: "500Mi"
        cpu: "500m"
      requests:
        memory: "200Mi"
        cpu: "50m"

  ingress:
    enabled: true
    ingressClassName: cilium
    annotations:
      cert-manager.io/cluster-issuer: cloudflare-letsencrypt-production
      ingress.cilium.io/loadbalancer-mode: shared
    hosts:
      - ''
    tls:
    - secretName: vmagent-tls
      hosts:  
        - ''

vmalert:
  ingress:
    enabled: true
    ingressClassName: cilium
    annotations:
      cert-manager.io/cluster-issuer: cloudflare-letsencrypt-production
      ingress.cilium.io/loadbalancer-mode: shared
    hosts:
      - ''
    tls:
    - secretName: vmalert-tls
      hosts:
        - ''

vmsingle:
  ingress:
    enabled: true
    ingressClassName: cilium
    annotations:
        cert-manager.io/cluster-issuer: cloudflare-letsencrypt-production
        ingress.cilium.io/loadbalancer-mode: shared
    hosts:
      - ''
    tls:
      - secretName: vmsingle-tls
        hosts:
          - ''

grafana:
  # grafana.ini:
  #   auth:
  #     signout_redirect_url: "${authentik_url}/application/o/grafana/end-session/"
  #     oauth_auto_login: true
  #   auth.generic_oauth:
  #     name: authentik
  #     enabled: true
  #     client_id: "${grafana_client_id}"
  #     client_secret: "${grafana_client_secret}"
  #     scopes: "openid profile email"
  #     auth_url: "${authentik_url}/application/o/authorize/"
  #     token_url: "${authentik_url}/application/o/token/"
  #     api_url: "${authentik_url}/application/o/userinfo/"
  #     # Optionally map user groups to Grafana roles
  #     role_attribute_path: contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'

  ingress:
    enabled: true
    ingressClassName: cilium
    annotations:
      cert-manager.io/cluster-issuer: cloudflare-letsencrypt-production
      ingress.cilium.io/loadbalancer-mode: shared
    hosts:
      - ''
    tls:
      - secretName: grafana-tls
        hosts:
          - ''

  persistence:
    enabled: true
    storageClassName: longhorn

  admin:
    existingSecret: victoriametrics-secret
    userKey: grafana_admin-user
    passwordKey: grafana_admin-password

kubeControllerManager:
  service:
    port: 10252
    targetPort: 10252
  vmScrape:
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: http

kubeEtcd:
  service:
    port: 2381
    targetPort: 2381
  vmScrape:
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: http

kubeProxy:
  enabled: true
  vmScrape:
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: http

kubeScheduler:
  service:
    port: 10251
    targetPort: 10251
  vmScrape:
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: http
